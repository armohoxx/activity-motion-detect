//
//  MainInteractor.swift
//  location_activity
//
//  Created phattarapon on 21/7/2565 BE.
//  Copyright © 2565 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import MapKit
import CoreLocation
import CoreMotion

class MainInteractor: CLLocationManager, CLLocationManagerDelegate {

    weak var presenter: MainPresenterProtocol?
    let locationManager = CLLocationManager()
    let motionActivityManager = CMMotionActivityManager()
}

extension MainInteractor: MainInteractorProtocol {
    
    func fetchHistoryActivity() {
        let activity = DBActivityHelper().selectActivityData()
        self.presenter?.notifyFetchHistoryActivity(activity: activity)
    }
    
    func fetchLocation() {
        if Reachability.isConnectedToNetwork() {
            LocationHelper.shared().update()
        } else {
            if let location =  LocationHelper.shared().location {
               self.presenter?.notifyLocationFetched(location: location)
            } else {
                print("The Internet connection appears to be offline.")
            }
        }
    }
    
    func insertHistoryActivity(activity: ActivityForm) {
        DBActivityHelper.insertActivity(historyActivity: activity)
    }
    
    func getLocation() {
        if CLLocationManager.locationServicesEnabled() {
            locationManager.delegate = self
            locationManager.requestAlwaysAuthorization()
            locationManager.desiredAccuracy = kCLLocationAccuracyBest
            locationManager.startUpdatingLocation()
        }
    }
    
    func getMotionActivity() {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd HH:mm"
        
        if CMMotionActivityManager.isActivityAvailable() {
            motionActivityManager.startActivityUpdates(to: OperationQueue.main) { (motion) in
                let date = dateFormatter.string(from: (motion?.startDate)!)
                self.presenter?.notifyDisplayMotionData(motion: motion, date: date)
            }
            
            let calendar = Calendar.current
            motionActivityManager.queryActivityStarting(from: calendar.startOfDay(for: Date()),
                                                        to: Date(),
                                                        to: OperationQueue.main) { (motionActivities, error) in
                                                            for motionActivity in motionActivities! {
                                                                if motionActivity.automotive {
                                                                    print(motionActivity)
                                                                }
                                                            }
            }
            
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let location = locations.last! as CLLocation
        let speed: Double = 3.6 * location.speed
        
        print("speed = \(speed)")
        
        if speed < 0 {
            self.presenter?.notifyDisplayGPSSpeed(speed: 0)
        } else {
            self.presenter?.notifyDisplayGPSSpeed(speed: speed)
        }
    }

    func locationManagerDidChangeAuthorization(_ manager: CLLocationManager, status: CLAuthorizationStatus) {
        if(status == CLAuthorizationStatus.denied) {
            self.presenter?.notifyDisabledLocationPopUp()
        } else {
            locationManager.startUpdatingLocation()
        }
    }
}
